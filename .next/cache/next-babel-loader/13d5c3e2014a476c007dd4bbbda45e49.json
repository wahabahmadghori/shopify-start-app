{"ast":null,"code":"import _taggedTemplateLiteral from \"@babel/runtime/helpers/esm/taggedTemplateLiteral\";\n\nvar _s = $RefreshSig$();\n\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\nquery getProducts($ids:[ID!]!){\\n\\tnodes(ids:$ids){\\n    ...on Product{\\n      title\\n      handle\\n      id\\n      images(first:1){\\n        edges{\\n          node{\\n            originalSrc\\n            altText\\n          }\\n        }\\n      }\\n      variants(first:1){\\n        edges{\\n          node{\\n            price\\n            id\\n          }\\n        }\\n      }\\n    }\\n  }\\n}\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport gql from 'graphql-tag';\nimport { useQuery } from '@apollo/react-hooks';\nimport { Card, ResourceList, Stack, TextStyle, Thumbnail } from '@shopify/polaris';\nimport store from 'store-js';\nvar GET_PRODUCTS_BY_IDS = gql(_templateObject());\n\nfunction ProductList() {\n  _s();\n\n  var _useQuery = useQuery(GET_PRODUCTS_BY_IDS, {\n    variables: {\n      ids: store.get('ids')\n    }\n  }),\n      loading = _useQuery.loading,\n      error = _useQuery.error,\n      data = _useQuery.data;\n\n  if (loading) {\n    return __jsx(\"div\", null, \"loading...\");\n  }\n\n  if (error) {\n    return __jsx(\"div\", null, error.message);\n  }\n\n  console.log('data: ', data);\n  return __jsx(\"div\", null, __jsx(\"h1\", null, \"Selected Products are:\"), data.nodes.map(function (item) {\n    return __jsx(\"p\", {\n      key: item.id\n    }, item.title);\n  }));\n}\n\n_s(ProductList, \"t0z2SrXJDzhl3h6STsA86t9Oe1U=\", false, function () {\n  return [useQuery];\n});\n\n_c = ProductList;\nexport default ProductList;\n\nvar _c;\n\n$RefreshReg$(_c, \"ProductList\");","map":{"version":3,"sources":["C:/Users/ghori/Desktop/Shopify App/shopify-start-app/components/ProductList.js"],"names":["gql","useQuery","Card","ResourceList","Stack","TextStyle","Thumbnail","store","GET_PRODUCTS_BY_IDS","ProductList","variables","ids","get","loading","error","data","message","console","log","nodes","map","item","id","title"],"mappings":";;;;;;;;;;;;;;;;;AAAA,OAAOA,GAAP,MAAgB,aAAhB;AACA,SAAQC,QAAR,QAAuB,qBAAvB;AACA,SAAQC,IAAR,EAAaC,YAAb,EAA0BC,KAA1B,EAAgCC,SAAhC,EAA0CC,SAA1C,QAA0D,kBAA1D;AACA,OAAOC,KAAP,MAAkB,UAAlB;AAEA,IAAMC,mBAAmB,GAAGR,GAAH,mBAAzB;;AA2BA,SAASS,WAAT,GAAsB;AAAA;;AAAA,kBACSR,QAAQ,CAACO,mBAAD,EAAqB;AAACE,IAAAA,SAAS,EAAC;AAACC,MAAAA,GAAG,EAACJ,KAAK,CAACK,GAAN,CAAU,KAAV;AAAL;AAAX,GAArB,CADjB;AAAA,MACbC,OADa,aACbA,OADa;AAAA,MACLC,KADK,aACLA,KADK;AAAA,MACCC,IADD,aACCA,IADD;;AAEpB,MAAGF,OAAH,EAAW;AAAC,WAAO,gCAAP;AAA6B;;AACzC,MAAGC,KAAH,EAAS;AAAC,WAAO,mBAAMA,KAAK,CAACE,OAAZ,CAAP;AAAkC;;AAC5CC,EAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAqBH,IAArB;AACA,SACE,mBACE,2CADF,EAEGA,IAAI,CAACI,KAAL,CAAWC,GAAX,CAAe,UAAAC,IAAI,EAAE;AACpB,WACA;AAAG,MAAA,GAAG,EAAEA,IAAI,CAACC;AAAb,OAAkBD,IAAI,CAACE,KAAvB,CADA;AAGD,GAJA,CAFH,CADF;AAUD;;GAfQd,W;UACsBR,Q;;;KADtBQ,W;AAiBT,eAAeA,WAAf","sourcesContent":["import gql from 'graphql-tag'\r\nimport {useQuery} from '@apollo/react-hooks'\r\nimport {Card,ResourceList,Stack,TextStyle,Thumbnail} from '@shopify/polaris'\r\nimport store from 'store-js'\r\n\r\nconst GET_PRODUCTS_BY_IDS = gql`\r\nquery getProducts($ids:[ID!]!){\r\n\tnodes(ids:$ids){\r\n    ...on Product{\r\n      title\r\n      handle\r\n      id\r\n      images(first:1){\r\n        edges{\r\n          node{\r\n            originalSrc\r\n            altText\r\n          }\r\n        }\r\n      }\r\n      variants(first:1){\r\n        edges{\r\n          node{\r\n            price\r\n            id\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n`\r\nfunction ProductList(){\r\n  const {loading,error,data} = useQuery(GET_PRODUCTS_BY_IDS,{variables:{ids:store.get('ids')}})\r\n  if(loading){return <div>loading...</div>}\r\n  if(error){return <div>{error.message}</div>}\r\n  console.log('data: ',data)\r\n  return(\r\n    <div>\r\n      <h1>Selected Products are:</h1>\r\n      {data.nodes.map(item=>{\r\n        return (\r\n        <p key={item.id}>{item.title}</p>\r\n        )\r\n      })}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ProductList;"]},"metadata":{},"sourceType":"module"}