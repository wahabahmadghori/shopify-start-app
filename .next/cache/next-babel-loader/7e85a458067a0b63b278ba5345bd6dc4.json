{"ast":null,"code":"var __jsx = React.createElement;\nimport React from \"react\";\nimport gql from \"graphql-tag\";\nimport { AiFillDelete } from \"react-icons/ai\";\nimport { useQuery, useMutation } from \"@apollo/react-hooks\";\nimport { Page, Layout, Card, Stack, Button, ResourceList, ResourceItem } from \"@shopify/polaris\";\nconst CREATE_SCRIPT_TAG = gql`\n  mutation scriptTagCreate($input: ScriptTagInput!) {\n    scriptTagCreate(input: $input) {\n      scriptTag {\n        id\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\n`;\nconst Query_SCRIPTTAGS = gql`\n  query {\n    scriptTags(first: 5) {\n      edges {\n        node {\n          id\n          src\n          displayScope\n        }\n      }\n    }\n  }\n`;\nconst DELETE_SCRIPTTAGS = gql(`\nmutation scriptTagDelete($id: ID!) {\n  scriptTagDelete(id: $id) {\n    deletedScriptTagId\n    userErrors {\n      field\n      message\n    }\n  }\n}\n`);\n\nconst ScriptPage = () => {\n  const {\n    loading,\n    error,\n    data\n  } = useQuery(Query_SCRIPTTAGS);\n  const [createScripts] = useMutation(CREATE_SCRIPT_TAG);\n  const [deleteScripts] = useMutation(DELETE_SCRIPTTAGS);\n  if (loading) return __jsx(\"div\", null, \"loading....\");\n  if (error) return __jsx(\"div\", null, error.message);\n  console.log(data);\n  return __jsx(Page, null, __jsx(Layout, null, __jsx(Layout.Section, null, __jsx(Card, {\n    title: \"Script Page\",\n    sectioned: true\n  }, __jsx(\"p\", null, \"Create Script Tag\"))), __jsx(Layout.Section, null, __jsx(Card, {\n    sectioned: true\n  }, __jsx(Button, {\n    size: \"slim\",\n    primary: \"true\",\n    onClick: () => {\n      createScripts({\n        variables: {\n          input: {\n            src: \"https://shopifyapp01.herokuapp.com/test-script.js\",\n            displayScope: \"ALL\"\n          }\n        },\n        refetchQueries: [{\n          query: Query_SCRIPTTAGS\n        }]\n      });\n    }\n  }, \"Create Tag\"))), __jsx(Layout.Section, null, __jsx(Card, {\n    sectioned: true\n  }, __jsx(ResourceList, {\n    resourceName: {\n      singular: 'Script',\n      plural: 'Scripts'\n    },\n    items: data.scriptTags.edges,\n    renderItem: item => {\n      return __jsx(ResourceItem, {\n        id: item.node.id\n      }, __jsx(Stack, null, __jsx(Stack.Item, null, __jsx(\"p\", null, item.node.id)), __jsx(Stack.Item, null, __jsx(Button, {\n        outline: true,\n        onClick: () => {\n          deleteScripts({\n            variables: {\n              id: item.node.id\n            },\n            refetchQueries: [{\n              query: Query_SCRIPTTAGS\n            }]\n          });\n        }\n      }, \"Delete\"))));\n    }\n  })))));\n};\n\nexport default ScriptPage;","map":null,"metadata":{},"sourceType":"module"}